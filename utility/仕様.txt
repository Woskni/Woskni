CSVLoader.cs
{
	CSVファイルを外部から読み込む際に用いるスクリプトです

	Load:
		ファイルパスを指定してCSVの読み込みを行いデータを格納します

	Unload:
		CSVデータを格納する変数の内容を初期化します

	GetCols:
		CSVの列数を返します

	GetRows:
		CSVの行数を返します

	GetDataCount:
		CSVのデータ数を返します

	GetString:
		指定行列のデータを文字列型で返します

	GetInteger:
		指定行列のデータを整数型で返します

	GetFloat:
		指定行列のデータを実数型で返します
}

EditorTheme.cs
{
	エディタ画面のライトモード・ダークモードに対応した背景色を取得するスクリプトです
	エディタ拡張などで活用できます

	lightThemeColor:
		ライトテーマの背景色を格納したColor変数です

	lightIconColor:
		ライトテーマのアイコン色を格納したColor変数です

	darkThemeColor:
		ダークテーマの背景色を格納したColor変数です

	darkIconColor:
		ダークテーマのアイコン色を格納したColor変数です

	theme:
		現在の背景モードを返します

	GetThemeColor:
		現在のエディタ画面の背景色を取得します
	
	GetIconColor:
		現在のエディタ画面に表示するアイコンの色を取得します
}

MeshCombiner.cs
{
	複数のオブジェクトのメッシュを結合して、ひとつのオブジェクトにするスクリプトです

	Combine:
		メッシュの結合を行います
		引数には「結合するオブジェクトの配列」「結合後のオブジェクトの名前」「結合後のオブジェクトの親」を指定可能です
}

PathConverter.cs
{
	ファイルのパス参照を変更するスクリプトです

	Convert: 
		ファイルパスの開始位置を変更したファイルパスを返します

		属性の引数から、以下の３つの開始位置を設定可能です
		RootDirectoryPath:	ルートディレクトリからの絶対パス
		AssetsPath:		Assetsフォルダからの相対パス
		CurrentDirectoryPath:	カレントディレクトリからの相対パス
}

Range.cs / RangeInt.cs
{
	最小から最大の範囲を格納する構造体です
	インスペクタでの編集がしやすいよう専用のエディタ拡張を組んであります

	Rangeでは実数の範囲を
	RangeIntでは整数の範囲をサポートします

	IsIn:
		引数値が範囲内かどうかを返します

	GetIn:
		引数値を範囲内に収束した値を返します
		たとえば Range(0, 255) において、引数96の場合は96が、引数280の場合は255が返ります

	GetOut:
		引数値を範囲内に発散した値を返します
		たとえば Range(0, 255) において、引数96の場合は0が、引数130の場合は255が、引数280の場合は280が返ります

	GetCompress:
		古い範囲から新しい範囲に拡縮した際の値を取得します
		たとえば Range(0, 100) において 引数 40, Range(100, 600) の場合は300が返ります

	GetAround:
		引数値を範囲内に収束した値を返します。ただし、超えている分はループ(min⇔max)として扱います
		たとえば Range(10, 100) において、引数162の場合は52が、引数5の場合は95が返ります

	Random:
		範囲内のランダムな値を返します

	DebugLog:
		最小値と最大値をデバッグログに残します
}

TextOperate.cs
{
	外部からテキストファイルに書き込み、読み込みを行うためのスクリプトです

	WriteFile:
		テキストファイルに書き込みます
		引数から、上書きするか追記するかを選択できます

	ReadFile:
		テキストファイルを読み込みます
}

Timer.cs
{
	時間を計測するためのタイマースクリプトです
	コンストラクタやセットアップ関数のほか、インスペクタ画面からも終了時間の設定が可能です

	Setup:
		タイマーの初期設定を行います

	Reset:
		経過時間を初期化します

	Update:
		タイマーの更新を行います。これは毎フレーム通してください
		引数でTime.timeScaleの影響を受けるかを設定できます

	Fin:
		タイマーを強制終了させます

	IsStarted:
		タイマーが開始済みかどうかを返します

	IsFinished:
		タイマーが終了時間を超過済みかどうかを返します

	DebugLog:
		現在時間と終了時間をデバッグログに残します
}

Vibration.cs
{
	オブジェクトを振動させるDOTween処理のスクリプトです
	前提としてDOTweenの導入が不可欠です

	Vibrate:
		オブジェクトを振動させます
		引数には振動の強度・振動率・振動時間・振動のイージング種別を設定できます

	IsVibrating:
		現在振動中かどうかを返します
}



