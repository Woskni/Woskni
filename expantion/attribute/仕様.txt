Chapter.cs
{
	変数の上に区切り線を入れる属性です

	[Chapter] public int dataID;
	といった変数を宣言したとき、インスペクタ画面では

	---------------------------------
	Data ID			[	]

	といった区切り線のついた変数となります（実際はハイフンではなく一本の線です）


	また、
	[Chapter("データ情報")] public int dataID;
	といったように文字列の引数付きの属性で変数を宣言したとき、インスペクタ画面では

	-- データ情報 ----------------------
	Data ID			[	]

	といった文字付きの区切り線となります
}

Comment.cs
{
	変数の上にコメントを入れる属性です
}

FilePath.cs
{
	ディレクトリからファイルを選択してファイルパスを設定できる属性です
	stringのような文字列型の変数にアタッチ可能です

	属性の引数から、以下の３つのパスを設定可能です
	RootDirectoryPath:	ルートディレクトリからの絶対パス
	AssetsPath:		Assetsフォルダからの相対パス
	CurrentDirectoryPath:	カレントディレクトリからの相対パス
}

MethodButton.cs
{
	関数(メソッド)を実行することが可能なボタンをインスペクタ画面に設置する属性です
	引数には関数の名前と表示するボタンのテキストを設定することが可能で、配列で複数設定すると横一列に複数のボタンを配置します
}

Name.cs
{
	変数やプロパティをインスペクタで表示する際の表示名を変更する属性です

	たとえば、
	[Name("データのID")] public int dataID;
	といった変数を宣言したとき、インスペクタ画面では変数名が Data ID ではなく データのID と表示されます
}

Percentage.cs
{
	小数の値をパーセント表記で表示する属性です（例: 0.55 => 55% , 1.205 => 120.5%）
	float, doubleのような小数型変数にアタッチ可能です
}

PreviewTexture.cs
{
	画像をインスペクタ画面にプレビュー表示する属性です
	TextureやSpriteのような画像変数にアタッチ可能です

	引数から表示する拡大率・アスペクト比率の保持適否を設定することができます

	三種類からアスペクト比率の設定を指定することができます
	・完全に枠内にする
	・枠の中でアスペクト比を固定する
	・枠ごとアスペクト比を固定する
}

ProgressBar.cs
{
	プログレスバーによる値の表示を行う属性です
	int, long, float, double のような値型の変数にアタッチ可能です

	引数から最小最大の範囲・超過時の処理を設定することができます

	三種類から超過時の処理の設定を指定することができます
	・無処理
	・範囲内に固定
	・過剰分を周回させる
}

ReadOnly.cs
{
	インスペクタ画面からのプロパティの値を変更不可にする属性です

	たとえば
	[ReadOnly] public int dataID = 0;
	といった変数を宣言したとき、スクリプトの内部では値の変更がされますがインスペクタからは値の変更ができなくなります

	また、インスペクタ上の変数値の背景色が暗くなり、変更が不可能・非推奨であることを明示します
}

ShowIf.cs
{
	条件がtrueのときのみプロパティを表示させる属性です

	引数に文字列で条件を指定すること表示の是非を設定できます

	文字列の構文解析アルゴリズムを一から作成し、多くの演算子やほかのプロパティ名から判断することが可能です

	たとえば
	{
		public int number;
		public int add;
		public string name;
		public bool flag;

		[ShowIf("number + add >= 0 && (name != "" || !flag)")]
		public float weight;
	}
	といった変数を宣言したとき、
	「numberとaddの合計が0以上かつ名前があるかフラグがfalseのとき」のみweight変数がインスペクタ上に表示されます。
}

Tag.cs
{
	タグを選択して変数にタグ名を設定する属性です
	stringのような文字列型の変数にアタッチ可能です

	また、このスクリプトにはレイヤーを選択して変数にタグ名を設定する属性も同封されています
	こちらもstringのような文字列型の変数にアタッチ可能です
}